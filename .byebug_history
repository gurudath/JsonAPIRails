c
@responce[:data][:message]
@responce["data"][:message]
@responce["data"]["message"]
@responce
c
 @user
c
@short_url
c
request
c
request
c
response
n
response
ApiKey.all
@key
c
@key
c
ApiKey.all
@responce
ApiKey.all
ApiKey.last
@responce["data"]["token"]
c
response
c
response
c
      get api_v1_short_urls_path,{ :format => :html }, headers
response
responce
 get api_v1_short_urls_path,{ :format => :json }, headers
request
c
response.body
response
c
cc
JSON.parse(response.body)
response.body
response
c
ShortUrl.first
@short_url
@short_url_visit_count_initial
c
ShortUrl.first
@short_url
@short_url_visit_count_initial
c
responce["data"]["token"]
responce
c
@current_user.short_urls
@current_user.short_visits
@current_user
c
 request.headers['HTTP_AUTHORIZATION'].gsub('Token','').strip
c
request.format.json?
c
request.format.json?
request.format.json
c
request.format.json
request.format
format_json?
ApiKey.find_by(access_token: request.headers['HTTP_AUTHORIZATION']).user
q
ApiKey.find_by(access_token: request.headers['HTTP_AUTHORIZATION']).user
ApiKey.find_by(access_token: request.headers['HTTP_AUTHORIZATION'])
ApiKey.find_by(access_token: request.headers['HTTP_AUTHORIZATION']).user
ApiKey.find_by(access_token: request.headers['HTTP_AUTHORIZATION'])
c
request.headers['HTTP_AUTHORIZATION']
@current_user
c
request.headers['HTTP_AUTHORIZATION']
c
request.headers['HTTP_AUTHORIZATION']
request.headers['HTTP_AUTHORIZATION_TOKEN']
request.headers['HTTP_AUTHORIZATION']
request.headers
request.headers["token"]
params
c
params
@current_user
c
params[:controller].include?('short_visits')
params[:controller].include?('short_visitss')
params[:controller].include?('short_urls')
params[:controller]
c
 data = ApiKey.create(user_id: responce[:data][:user].try(:id))
 data = ApiKey.create(user_id: responce[:data][:user].try(id))
 data = ApiKey.create(user_id: responce[:data][:user].id)
 data = ApiKey.create(user_id: responce[:data][:user])
responce = User.authenticate(params[:email], params[:password])
q
params
c
request.ip
c
request.env["HTTP_X_FORWARDED_FOR"]
request.env["HTTP_X_REAL_IP"]
request.ip
request.env['HTTP_X_FORWARDED_FOR']
request.env['action_dispatch.request_id']
request.client_ip
 env["action_dispatch.remote_ip"].to_s()
env['REMOTE_ADDR']
request.env["HTTP_X_FORWARDED_FOR"]env['REMOTE_ADDR']
request.env['REMOTE_ADDR']
request.remote_ip
request.env["HTTP_X_FORWARDED_FOR"]
request.env['REMOTE_ADDR']
request.remote_addr
request.remote_ip
request.env['HTTP_X_REAL_IP']
request.env["HTTP_X_FORWARDED_FOR"]
request.ip
request.remote_ip
c
 URI.parse("http://freegeoip.net/json/#{self.orginal_url.sub(/^https?\:\/\/(www.)?/,'')}")
c
self.orginal_url.sub(/^https?\:\/\/(www.)?/,'')
c
self.strip_url('https://yahoo.com')
self.strip_url(https://yahoo.com)
url = URI.parse("http://freegeoip.net/json/#{self.strip_url self.orginal_url}")
c
(record.visit_count||0 )+1
record.visit_count||0 
(record.visit_count||0 + 1)
record.visit_count
c
"http://#{self.orginal_url}"
self.orginal_url && !url_protocol_present?
c
self.orginal_url
!url_protocol_present?
 self.orginal_url 
c
ShortUrl.find_by(shorty: params["token"])
ShortUrl.last
ShortUrl.find_by()
params
c
@default
@default || req.headers['Accept'].include?("application/vnd.example.v#{@version}")
@default
options[:default]
options[:version]
c
responce[:data][:status]
c
responce[:data][:status]
responce[:data]
responce["data"]
responce
q
responce
responce.to_json
responce.to_son
responce["data"]
responce
c
